# E-Doso - Sistema de Gerenciamento para Lares de Idosos

![React Native](https://img.shields.io/badge/React_Native-20232A?style=for-the-badge&logo=react&logoColor=61DAFB)
![Django](https://img.shields.io/badge/Django-092E20?style=for-the-badge&logo=django&logoColor=green)
![Expo](https://img.shields.io/badge/Expo-000020?style=for-the-badge&logo=expo&logoColor=white)

## üìñ Sobre o Projeto

**E-doso** √© uma solu√ß√£o completa (Full Stack) projetada para otimizar a gest√£o de cuidados em lares e casas de repouso para idosos. O sistema √© composto por um aplicativo m√≥vel para cuidadores e um backend robusto para gerenciar todas as informa√ß√µes de forma segura e centralizada.

O objetivo principal √© facilitar o controle de medicamentos, hor√°rios, prescri√ß√µes e dados vitais dos idosos, garantindo que os cuidadores tenham acesso r√°pido e preciso √†s informa√ß√µes necess√°rias para oferecer o melhor cuidado poss√≠vel.

O desenvolvimento do aplicativo comp√µe o trabalho final da disciplina SSC0961 - Desenvolvimento Web E Mobile da Universidade de S√£o Paulo - Instituto de Ci√™ncias Matem√°ticas e de Computa√ß√£o - 1¬∫ semestre de 2024. Professora Dra. Lina Mar√≠a Garc√©s Rodr√≠guez.

---

## ‚ú® Funcionalidades Principais

O projeto √© dividido em duas partes principais: um **Frontend** (aplicativo m√≥vel) e um **Backend** (API REST).

### Frontend (React Native com Expo)
- **Autentica√ß√£o de Usu√°rios:** Telas de Login e Cadastro seguras.
- **Gerenciamento de Lares (Grupos):**
    - Permite que um usu√°rio crie um novo "Lar" (grupo de cuidadores).
    - Permite que outros usu√°rios entrem em um lar existente atrav√©s de um c√≥digo de acesso √∫nico.
    - O administrador do lar pode gerenciar membros (adicionar/remover).
- **Cadastro e Gest√£o de Idosos:**
    - Formul√°rio completo para registrar informa√ß√µes pessoais, documentos e condi√ß√µes de sa√∫de de cada idoso.
    - Visualiza√ß√£o detalhada do perfil de cada idoso.
- **Controle de Estoque de Medicamentos:**
    - Cadastro de novos medicamentos com detalhes como nome, princ√≠pio ativo, concentra√ß√£o e quantidade.
    - Listagem e busca de medicamentos em estoque.
- **Gerenciamento de Prescri√ß√µes:**
    - Associa√ß√£o de medicamentos a idosos, com defini√ß√£o de hor√°rios, dosagens e frequ√™ncia.
- **Agenda de Hor√°rios:**
    - Exibi√ß√£o di√°ria dos medicamentos a serem administrados, organizada por hor√°rio.
- **Log de Administra√ß√£o:**
    - Registro de cada dose administrada, recusada ou pulada, incluindo quem foi o respons√°vel e observa√ß√µes.

### Backend (Django REST Framework)
- **API RESTful:** Endpoints seguros para todas as opera√ß√µes do frontend.
- **Autentica√ß√£o por Token:** Garante que apenas usu√°rios autenticados acessem os dados.
- **Modelagem de Dados Completa:**
    - `Usuario`: Modelo de usu√°rio customizado.
    - `Grupo`: Representa um lar, com admin e membros.
    - `Idoso`, `Medicamento`, `Prescricao` e `LogAdministracao`: Modelos centrais do neg√≥cio.
- **Permiss√µes Granulares:** Sistema de permiss√£o que diferencia administradores de membros comuns do grupo.
- **URLs Aninhadas (Nested Routers):** Estrutura de rotas l√≥gicas, como `/api/grupos/{id_grupo}/idosos/`.

---

## üõ†Ô∏è Tecnologias Utilizadas

#### Backend
- **Python**
- **Django** & **Django REST Framework**
- **dj-rest-auth** para autentica√ß√£o
- **dj-database-url** para configura√ß√£o de banco de dados
- **WhiteNoise** para servir arquivos est√°ticos

#### Frontend
- **JavaScript (React Native)**
- **Expo** (SDK)
- **React Navigation** para navega√ß√£o entre telas
- **Axios** para requisi√ß√µes HTTP
- **AsyncStorage** para armazenamento local no dispositivo

---

## üöÄ Como Executar o Projeto

Para executar este projeto, voc√™ precisar√° configurar e iniciar o Backend (servidor Django) e o Frontend (aplicativo Expo) separadamente.

### Pr√©-requisitos
- **Node.js** (vers√£o LTS recomendada)
- **Python 3.x**
- **Gerenciador de pacotes NPM** ou **Yarn**
- **Expo Go** no seu celular (para testes mobile)

### 1. Clone o Reposit√≥rio

```bash
git clone https://github.com/ThValverde/dev_wm_project.git
cd dev_wm_project
```

### 2. Configurando o Backend (Django)

Navegue at√© a pasta do backend e configure o ambiente virtual.

```bash
# Navegue para a pasta do backend
cd backend/django

# Crie e ative um ambiente virtual
python3 -m venv venv
source venv/bin/activate  # No Windows, use `venv\Scripts\activate`

# Instale as depend√™ncias
pip install -r requirements.txt

# Aplique as migra√ß√µes do banco de dados
python3 manage.py migrate

# Inicie o servidor Django
python3 manage.py runserver 0.0.0.0:8000
```
O backend estar√° rodando em `http://<seu-ip-local>:8000`.

### 3. Configurando o Frontend (Expo)

Abra um **novo terminal**, navegue at√© a pasta do frontend e instale as depend√™ncias.

```bash
# Navegue para a pasta do frontend (a partir da raiz do projeto)
cd frontend/MyApp

# Instale as depend√™ncias
npm install

# Inicie o servidor de desenvolvimento do Expo
npx expo start
```
Isso abrir√° o Metro Bundler no seu navegador. Voc√™ pode usar o aplicativo **Expo Go** no seu celular para escanear o QR Code e executar o aplicativo.

**Importante:** O aplicativo frontend precisa saber o endere√ßo do backend. Para conectar ao seu servidor local, voc√™ precisar√° alterar a URL da API no c√≥digo-fonte do frontend para o IP da sua m√°quina onde o backend est√° rodando (ex: `http://192.168.1.10:8000`). Uma vers√£o online do backend est√° dispon√≠vel em `https://e-doso-backend.onrender.com` e pode ser usada para testes.
Para simplificar o processo, √© poss√≠vel clonar diretamente https://github.com/ThValverde/dev_wm_project/local.git