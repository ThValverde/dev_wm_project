"""

Aqui há todas as configurações do meu projeto Django. COmo qual é a pasta do meu projeto que tem os templates,
qual é a linguagem, o timezone, o banco de dados, etc.

Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import dj_database_url
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-&#o=w8e6d&hj_=u#yyc$_#j57l_714zndv%ol%9!+qv_)u#v6g'

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = True
DEBUG = 'RENDER' not in os.environ

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'dj_rest_auth',         
    'dj_rest_auth.registration',
    'corsheaders',
    'api'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', 
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database          
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {             # LOCAL
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# DATABASES = {             # DEPLOY
#     'default': dj_database_url.config(
#         default=f"sqlite:///{BASE_DIR / 'db.sqlite3'}",
#         conn_max_age=600
#     )
# }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators  

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8, 
        }
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

STATIC_ROOT = BASE_DIR / 'staticfiles'

# Configuração para o WhiteNoise servir os arquivos estáticos de forma eficiente
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication', 
        #'rest_framework_simplejwt.authentication.JWTAuthentication', #ver se ta ok
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,  # Define o número padrão de itens por página
}

# Necessário para dj-rest-auth
SITE_ID = 1

AUTH_USER_MODEL = 'api.Usuario'

ACCOUNT_EMAIL_VERIFICATION = 'none'  # Pode ser 'mandatory', 'optional' ou 'none'

CORS_ALLOWED_ORIGINS = [        # LOCAL
    'http://127.0.0.1:8000',
    'http://localhost:8000',
    'http://10.0.2.2:8000',      # For Android emulator access to host's localhost
    'http://192.168.0.14:8000', # For local network access if server runs on this IP/port
    'http://localhost:8081',  # For React Native Metro bundler
    # If your frontend runs on a different port (e.g., React, Vue, Angular dev server), add its origin here:
    # 'http://localhost:3000',
    # 'http://127.0.0.1:3000',
]

# CORS_ALLOWED_ORIGINS = [            # DEPLOY
#     # Adicione a URL do seu frontend em produção aqui
#     # Exemplo: 'https://meu-frontend.onrender.com',
#     #'https://e-doso-backend.onrender.com',
#     'http://localhost:8081',
# ]


CORS_ALLOW_HEADERS = [
    'authorization',
    'content-type',
]

CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'OPTIONS',
]

ALLOWED_HOSTS = [         # LOCAL
    '127.0.0.1',
    'localhost',
    '10.0.2.2',  # IP para o emulador Android acessar o localhost do host
    '192.168.0.14', # IP da sua máquina na rede local (verifique e ajuste se for diferente)
]

# ALLOWED_HOSTS = []      # DEPLOY

# RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')     # DEPLOY
# if RENDER_EXTERNAL_HOSTNAME:
#     ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

REST_AUTH = {
    'LOGIN_SERIALIZER': 'api.serializers.CustomLoginSerializer',
}